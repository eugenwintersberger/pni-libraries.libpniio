name: Build and Test

on:
  push:
  pull_request:
  schedule:
    - cron: '30 0 22 * *'

defaults:
  run:
    shell: bash

jobs:
  dpkg:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [debian12, debian11, debian11_boost, debian10, ubuntu23.10, ubuntu22.04, ubuntu20.04]
        buildtype: [Debug, Release]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Build the docker
        env:
          OS: ${{ matrix.os }}
        run: docker build -t build .ci/${OS}

      - name: Run the docker
        run: docker run --name build -i -d -v"$PWD:/home/p00user/src"  build

      - name: Cmake config
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "mkdir ../build && cd ../build && cmake -DPNINEXUS_CONAN=DISABLE -DCMAKE_BUILD_TYPE=$BUILDTYPE ../src"
        # run: docker  exec build /bin/bash -c "cd build && cmake -G Ninja -Dh5cpp_DIR=/opt/h5cpp/lib/cmake/h5cpp-0.5 -DPNINEXUS_CONAN=DISABLE -DCMAKE_BUILD_TYPE=$BUILDTYPE .."

      - name: Build all
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd ../build && cmake --build . --target all --config $BUILDTYPE -- -j4"

      - name: Build api_doc
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd ../build && cmake --build . --target api_doc --config $BUILDTYPE"

      - name: Build html
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd ../build && cmake --build . --target html --config $BUILDTYPE"

      - name: Build check
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd ../build && cmake --build . --target check --config $BUILDTYPE -- -j3  CTEST_OUTPUT_ON_FAILURE=TRUE"

      - name: Append documentation for the latest release version
        if: (! startsWith(github.ref, 'refs/heads/docs_')) && matrix.buildtype == 'Release' && matrix.os == 'debian12'
        run: |
             docker  exec  --user root build  /bin/bash -c "chown -R p00user /home/p00user/src"
             docker  exec build /bin/bash -c "git config --unset-all remote.origin.fetch"
             docker  exec build /bin/bash -c "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
             docker  exec build /bin/bash -c "git fetch && git clean -fd && git checkout gh-pages && git pull"
             docker  exec build /bin/bash -c "mkdir -p ./latest && shopt -u dotglob && rm -rf ./latest/*"
             docker  exec build /bin/bash -c "mv -f ../build/doc/build/html/* ./latest/"
             docker  exec build /bin/bash -c "mv -f ../build/doc/api/html ./latest/api/doxygen"
             docker  exec build /bin/bash -c "mv -f ../build/doc/index.html ./"
             docker  exec build /bin/bash -c "mv -f ../build/doc/_config.yml ./"
             docker  exec build /bin/bash -c "rm -rf ./latest/_sources"

      - name: Extract the code version from the branch name
        if: startsWith(github.ref, 'refs/heads/docs_') && matrix.buildtype == 'Release' && matrix.os == 'debian12'
        shell: bash
        run: echo "##[set-output name=docver;]$(echo ${GITHUB_REF#refs/heads/docs_})"
        id: extract_docver

      - name: Append documentation for the extracted release version
        if: startsWith(github.ref, 'refs/heads/docs_') && matrix.buildtype == 'Release' && matrix.os == 'debian12'
        run: |
             echo Version: ${{ steps.extract_docver.outputs.docver }}
             docker  exec  --user root build  /bin/bash -c "chown -R p00user /home/p00user/src"
             docker  exec build /bin/bash -c "git config --unset-all remote.origin.fetch"
             docker  exec build /bin/bash -c "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
             docker  exec build /bin/bash -c "git fetch && git clean -fd && git checkout gh-pages && git pull"
             docker  exec build /bin/bash -c "mkdir -p ./${{ steps.extract_docver.outputs.docver }}"
             docker  exec build /bin/bash -c "shopt -u dotglob && rm -rf ./${{ steps.extract_docver.outputs.docver }}/* "
             docker  exec build /bin/bash -c "mv -f ../build/doc/build/html/* ./${{ steps.extract_docver.outputs.docver }}/"
             docker  exec build /bin/bash -c "mv -f ../build/doc/api/html ./${{ steps.extract_docver.outputs.docver }}/api/doxygen"
             docker  exec build /bin/bash -c "rm -rf ./${{ steps.extract_docver.outputs.docver }}/_sources"

      - name: Deploy documentation
        if: (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/docs_'))  && matrix.buildtype == 'Release' && matrix.os == 'debian12'
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: .
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ({sha}) {msg}"

      - name: Stop the docker
        run: docker container stop build

  conan:
    strategy:
      matrix:
        shared: [
          shared,
          # static  # not supported yet
        ]
        mpi: [
        # mpi,   # not supported yet
        serial]
        libcxx: [
            libstdc++11,
            # libc++   # not supported yet
        ]
        image: [
            "conanio/gcc11-ubuntu16.04:2.0.2",
            # "conanio/clang13-ubuntu16.04:2.0.2"
        ]
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.image }}
      options: '--user=root'
    steps:
      - uses: actions/checkout@v2
      - name: Set environment variables
        run: |
            bash .github/workflows/set_env_vars.sh \
              ${{ matrix.shared }} \
              ${{ matrix.mpi }}
      - name: Install MPI prerequisites
        if: ${{ matrix.mpi == 'mpi' }}
        run: |
            apt-get update
            apt-get install -y --no-install-recommends ssh
      - name: build h5cpp
        run: |
          mkdir h5cpp-src && cd h5cpp-src &&  git clone https://github.com/ess-dmsc/h5cpp && mkdir h5cpp-build
          CONAN_ARGS=" \
            -o with_boost=True \
            -o with_mpi=${PNINEXUS_WITH_MPI} \
            -o shared=${PNINEXUS_SHARED} \
            -o install_prefix=/usr/local/ \
            -o *:shared=${PNINEXUS_SHARED}"
          conan profile detect
          conan remove -c zlib/*
          # conan remove -c boost/*
          # conan remove -c b2/*
          conan install h5cpp ${CONAN_ARGS} --output-folder h5cpp-build --build missing --update
          conan build h5cpp ${CONAN_ARGS} --output-folder h5cpp-build
          cd  h5cpp-build
          make install
          cd ../../
      - name: build pninexus
        run: |
          CONAN_ARGS=" \
            -o with_boost=True \
            -o with_mpi=${PNINEXUS_WITH_MPI} \
            -o shared=${PNINEXUS_SHARED} \
            -o install_prefix=/usr/local/ \
            -o *:shared=${PNINEXUS_SHARED}"
          conan install . ${CONAN_ARGS}  --output-folder build   --build missing  --update
          conan build . ${CONAN_ARGS}  --output-folder build
      - name: run tests
        run: |
          CONAN_ARGS=" \
            -o with_boost=True \
            -o with_mpi=${PNINEXUS_WITH_MPI} \
            -o shared=${PNINEXUS_SHARED} \
            -o *:shared=${PNINEXUS_SHARED}"
          cd build
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
          make check CTEST_OUTPUT_ON_FAILURE=TRUE  -j4
  windows-2022:
    strategy:
      matrix:
        shared: [
          "shared",
          # "static"  # not supported yet
        ]
    runs-on: windows-2022
    steps:
      - name: check cmake
        run: |
            cmake --version
      - uses: actions/checkout@v2
      - name: Add MSVC to PATH
        uses: ilammy/msvc-dev-cmd@v1
      - name: Set environment variables
        run: |
            bash .github/workflows/set_env_vars.sh \
              ${{ matrix.shared }} \
              "serial"
      - name: Install and configure conan
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade conan==2.0.2
      - name: build h5cpp
        run: |
          mkdir h5cpp-src && cd h5cpp-src &&  git clone https://github.com/ess-dmsc/h5cpp && mkdir h5cpp-build
          CONAN_ARGS=" --profile h5cpp/.github/workflows/conan/profiles/vs2022 \
            -o with_boost=False \
            -o shared=${PNINEXUS_SHARED} \
            -o install_prefix=D:/a/libpninexus/libpninexus/h5cpp-src/h5cppbin \
            -o *:shared=${PNINEXUS_SHARED}"
          conan profile detect
          conan remove -c zlib/*
          # conan remove -c boost/*
          # conan remove -c b2/*
          conan install h5cpp ${CONAN_ARGS} --output-folder h5cpp-build --build missing --update
          conan build h5cpp ${CONAN_ARGS} --output-folder h5cpp-build
          cd  h5cpp-build
          cmake --install . --prefix "../h5cppbin/"
          cd ../../
      - name: build pninexus
        run: |
          CONAN_ARGS=" --profile h5cpp-src/h5cpp/.github/workflows/conan/profiles/vs2022 \
            -o with_boost=True \
            -o shared=${PNINEXUS_SHARED} \
            -o install_prefix=D:/a/libpninexus/libpninexus/h5cpp-src/h5cppbin \
            -o *:shared=${PNINEXUS_SHARED}"
          conan install . ${CONAN_ARGS}  --output-folder build   --build missing  --update
          conan build . ${CONAN_ARGS}  --output-folder build
      - name: run tests
        run: |
          cd build
          copy ..\h5cpp-src\h5cppbin\bin\h5cpp.dll .\bin\
          # .\conanbuild.bat
          # .\conanrun.bat
          .\conanbuildenv-release-x86_64.ps1
          .\conanrunenv-release-x86_64.ps1
          cmake --build . --verbose --target check --config RELEASE
        shell: pwsh

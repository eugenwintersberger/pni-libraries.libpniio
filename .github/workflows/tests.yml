name: Test Package

on:
  push:
  pull_request:
  schedule:
    - cron: '30 0 22 * *'

jobs:
  # deb:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       os: [debian11, debian10, debian9, ubuntu21.10, ubuntu20.04, ubuntu18.04]
  #       buildtype: [Debug, Release]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2

  #     - name: Build the docker
  #       env:
  #         OS: ${{ matrix.os }}
  #       run: docker build -t build .ci/${OS}

  #     - name: Run the docker
  #       run: docker run --name build -i -d -v"$PWD:/src" build

  #     - name: Update git submodules
  #       run: bash -c "git submodule init && git submodule update --remote && mkdir build"

  #     - name: Run Ninja
  #       env:
  #         BUILDTYPE: ${{ matrix.buildtype }}
  #       run: docker  exec build /bin/bash -c "cd build && cmake -G Ninja -Dh5cpp_DIR=/opt/h5cpp/lib/cmake/h5cpp-0.5 -DPNINEXUS_CONAN=DISABLE -DCMAKE_BUILD_TYPE=$BUILDTYPE .."

  #     - name: Build all
  #       env:
  #         BUILDTYPE: ${{ matrix.buildtype }}
  #       run: docker  exec build /bin/bash -c "cd build && cmake --build . --target all --config $BUILDTYPE -- -j4"

  #     - name: Build api_doc
  #       env:
  #         BUILDTYPE: ${{ matrix.buildtype }}
  #       run: docker  exec build /bin/bash -c "cd build && cmake --build . --target api_doc --config $BUILDTYPE"

  #     - name: Build html
  #       env:
  #         BUILDTYPE: ${{ matrix.buildtype }}
  #       run: docker  exec build /bin/bash -c "cd build && cmake --build . --target html --config $BUILDTYPE"

  #     - name: Build check
  #       env:
  #         BUILDTYPE: ${{ matrix.buildtype }}
  #       run: docker  exec build /bin/bash -c "cd build && cmake --build . --target check --config $BUILDTYPE -- -j4"

  #     - name: Append documentation for the latest release version
  #       if: github.ref == 'refs/heads/develop' && matrix.buildtype == 'Release' && matrix.os == 'debian11'
  #       run: |
  #            docker  exec build /bin/bash -c "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
  #            docker  exec build /bin/bash -c "git fetch && rm -rf cmake && git checkout gh-pages && git pull"
  #            docker  exec build /bin/bash -c "mkdir -p ./latest && shopt -u dotglob && rm -rf ./latest/*"
  #            docker  exec build /bin/bash -c "mv -f build/doc/build/html/* ./latest/"
  #            docker  exec build /bin/bash -c "mv -f build/doc/api/html ./latest/api/doxygen"
  #            docker  exec build /bin/bash -c "mv -f build/doc/index.html ./"
  #            docker  exec build /bin/bash -c "mv -f build/doc/_config.yml ./"
  #            docker  exec build /bin/bash -c "find ./ -type d -name \"CMakeFiles\" -prune -exec rm -rf {} \\; "
  #            docker  exec build /bin/bash -c "find ./ -name \"Makefile\" -exec rm -rf {} \\; "
  #            docker  exec build /bin/bash -c "find ./ -name \"*.cmake\" -exec rm -rf {} \\; "
  #            docker  exec build /bin/bash -c "rm -rf ./latest/_sources"
  #            docker  exec build /bin/bash -c "rm -rf build"
  #            docker  exec build /bin/bash -c "rm -rf doc"
  #            docker  exec build /bin/bash -c "rm -rf cmake"

  #     - name: Extract the code version from the branch name
  #       if: startsWith(github.ref, 'refs/heads/docs_') && matrix.buildtype == 'Release' && matrix.os == 'debian11'
  #       shell: bash
  #       run: echo "##[set-output name=docver;]$(echo ${GITHUB_REF#refs/heads/docs_})"
  #       id: extract_docver

  #     - name: Append documentation for the extracted release version
  #       if: startsWith(github.ref, 'refs/heads/docs_') && matrix.buildtype == 'Release' && matrix.os == 'debian11'
  #       run: |
  #            echo Version: ${{ steps.extract_docver.outputs.docver }}
  #            docker  exec build /bin/bash -c "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
  #            docker  exec build /bin/bash -c "git fetch && rm -rf cmake && git checkout gh-pages && git pull"
  #            docker  exec build /bin/bash -c "mkdir -p ./${{ steps.extract_docver.outputs.docver }}"
  #            docker  exec build /bin/bash -c "shopt -u dotglob && rm -rf ./${{ steps.extract_docver.outputs.docver }}/* "
  #            docker  exec build /bin/bash -c "mv -f build/doc/build/html/* ./${{ steps.extract_docver.outputs.docver }}/"
  #            docker  exec build /bin/bash -c "mv -f build/doc/api/html ./${{ steps.extract_docver.outputs.docver }}/api/doxygen"
  #            docker  exec build /bin/bash -c "find ./ -type d -name \"CMakeFiles\" -prune -exec rm -rf {} \\;"
  #            docker  exec build /bin/bash -c "find ./ -name \"Makefile\" -exec rm -rf {} \\; "
  #            docker  exec build /bin/bash -c "find ./ -name \"*.cmake\" -exec rm -rf {} \\;"
  #            docker  exec build /bin/bash -c "rm -rf ./${{ steps.extract_docver.outputs.docver }}/_sources"
  #            docker  exec build /bin/bash -c "rm -rf build"
  #            docker  exec build /bin/bash -c "rm -rf doc"
  #            docker  exec build /bin/bash -c "rm -rf cmake"

  #     - name: Deploy documentation
  #       if: (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/docs_'))  && matrix.buildtype == 'Release' && matrix.os == 'debian11'
  #       uses: s0/git-publish-subdir-action@develop
  #       env:
  #         REPO: self
  #         BRANCH: gh-pages
  #         FOLDER: .
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         MESSAGE: "Build: ({sha}) {msg}"

  #     - name: Stop the docker
  #       run: docker container stop build

  ubuntu:
    strategy:
      matrix:
        shared: [
          shared,
          # static
        ]
        mpi: [
        # mpi,
        serial]
        libcxx: [
        libstdc++11,
        # libc++
        ]
        image: [
            "conanio/gcc11-ubuntu16.04",
            # "conanio/clang13-ubuntu16.04"
        ]
        # exclude:
        #   - image: conanio/gcc11-ubuntu16.04
        #     libcxx: libc++
        include:
          - image: conanio/gcc11-ubuntu16.04
            profile: gcc11
          # - image: conanio/clang13-ubuntu16.04
          #   libcxx: libstdc++11
          #   profile: clang13-libstdc++
          # - image: conanio/clang13-ubuntu16.04
          #   libcxx: libc++
          #   profile: clang13-libc++
    runs-on: ubuntu-20.04
    container:
      image: ${{ matrix.image }}
      options: '--user=root'
    steps:
      - uses: actions/checkout@v2
      - name: Set environment variables
        run: |
            bash .github/workflows/set_env_vars.sh \
              ${{ matrix.shared }} \
              ${{ matrix.mpi }}
      - name: Install MPI prerequisites
        if: ${{ matrix.mpi == 'mpi' }}
        run: |
            apt-get update
            apt-get install -y --no-install-recommends ssh
      - name: Install and configure conan
        run: |
          CONAN_ARGS="--profile .github/workflows/conan/profiles/${{ matrix.profile }} \
            -o with_mpi=${PNINEXUS_WITH_MPI} \
            -o shared=${PNINEXUS_SHARED} \
            -o hdf5:shared=${PNINEXUS_SHARED}"
          conan lock create conanfile.py ${CONAN_ARGS} --base --lockfile-out base.lock
          conan lock create conanfile.py ${CONAN_ARGS} --build missing
      - name: cache conan dependencies
        uses: actions/cache@v2
        with:
          path: /home/conan/.conan/data
          key: conan-${{ matrix.profile }}-${{ hashfiles('base.lock') }}-${{ hashFiles('conan.lock') }}
          restore-keys: |
            conan-${{ matrix.profile }}-${{ hashfiles('base.lock') }}
            conan-${{ matrix.profile }}
      - name: install conan dependencies
        run: |
          conan install . \
            --install-folder build \
            --lockfile conan.lock \
            --build missing \
            --update
      - name: build h5cpp
        run: |
          mkdir h5cpp-src && cd h5cpp-src &&  git clone https://github.com/ess-dmsc/h5cpp && mkdir h5cpp-build
          cd h5cpp-build && cmake -DCMAKE_BUILD_TYPE=Release -DH5CPP_WITH_BOOST=ON -DH5CPP_DISABLE_TESTS=True -DH5CPP_CONAN_FILE=../../conanfile.txt  ../h5cpp
          make install -j4 && cd ../../ 
      - name: build with cmake
        run: |
          # conan build .  --build-folder build
          cd build && cmake -DCMAKE_BUILD_TYPE=Release -Dh5cpp_DIR=/usr/local/lib/cmake/h5cpp-0.5 ../
          make install -j4
          # make check -j4
      - name: run tests
        run: |
          cd build
          cmake --build . --target check --config Release -- -j4

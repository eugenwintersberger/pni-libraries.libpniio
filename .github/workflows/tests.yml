name: Test Package

on:
  push:
  pull_request:
  schedule:
    - cron: '30 0 22 * *'

jobs:

  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [debian11, debian10, ubuntu21.10, ubuntu20.04, ubuntu18.04]
        buildtype: [Debug, Release]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Build the docker
        env:
          OS: ${{ matrix.os }}
        run: docker build -t build .ci/${OS}

      - name: Run the docker
        run: docker run --name build -i -d -v"$PWD:/src" build

      - name: Update git submodules
        run: bash -c "git submodule init && git submodule update --remote && mkdir build"

      - name: Run Ninja
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd build && cmake -G Ninja -Dh5cpp_DIR=/opt/h5cpp/lib/cmake/h5cpp-0.5 -DWITH_CONAN=OFF -DCMAKE_BUILD_TYPE=$BUILDTYPE .."
        # run: docker  exec build /bin/bash -c "cd build && cmake -G Ninja -DWITH_CONAN=OFF -DCMAKE_BUILD_TYPE=$BUILDTYPE .."

      - name: Build all
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd build && cmake --build . --target all --config $BUILDTYPE -- -j4"

      - name: Build api_doc
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd build && cmake --build . --target api_doc --config $BUILDTYPE"

      - name: Build html
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd build && cmake --build . --target html --config $BUILDTYPE"

      - name: Build check
        env:
          BUILDTYPE: ${{ matrix.buildtype }}
        run: docker  exec build /bin/bash -c "cd build && cmake --build . --target check --config $BUILDTYPE -- -j4"

      - name: Append documentation for the latest release version
        if: github.ref == 'refs/heads/develop' && matrix.buildtype == 'Release' && matrix.os == 'debian11'
        run: |
             docker  exec build /bin/bash -c "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
             docker  exec build /bin/bash -c "git fetch && rm -rf cmake && git checkout gh-pages && git pull"
             docker  exec build /bin/bash -c "mkdir -p ./latest && shopt -u dotglob && rm -rf ./latest/*"
             docker  exec build /bin/bash -c "mv -f build/doc/build/html/* ./latest/"
             docker  exec build /bin/bash -c "mv -f build/doc/api/html ./latest/api/doxygen"
             docker  exec build /bin/bash -c "mv -f build/doc/index.html ./"
             docker  exec build /bin/bash -c "mv -f build/doc/_config.yml ./"
             docker  exec build /bin/bash -c "find ./ -type d -name \"CMakeFiles\" -prune -exec rm -rf {} \\; "
             docker  exec build /bin/bash -c "find ./ -name \"Makefile\" -exec rm -rf {} \\; "
             docker  exec build /bin/bash -c "find ./ -name \"*.cmake\" -exec rm -rf {} \\; "
             docker  exec build /bin/bash -c "rm -rf ./latest/_sources"
             docker  exec build /bin/bash -c "rm -rf build"
             docker  exec build /bin/bash -c "rm -rf doc"
             docker  exec build /bin/bash -c "rm -rf cmake"

      - name: Extract the code version from the branch name
        if: startsWith(github.ref, 'refs/heads/docs_') && matrix.buildtype == 'Release' && matrix.os == 'debian11'
        shell: bash
        run: echo "##[set-output name=docver;]$(echo ${GITHUB_REF#refs/heads/docs_})"
        id: extract_docver

      - name: Append documentation for the extracted release version
        if: startsWith(github.ref, 'refs/heads/docs_') && matrix.buildtype == 'Release' && matrix.os == 'debian11'
        run: |
             echo Version: ${{ steps.extract_docver.outputs.docver }}
             docker  exec build /bin/bash -c "git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'"
             docker  exec build /bin/bash -c "git fetch && rm -rf cmake && git checkout gh-pages && git pull"
             docker  exec build /bin/bash -c "mkdir -p ./${{ steps.extract_docver.outputs.docver }}"
             docker  exec build /bin/bash -c "shopt -u dotglob && rm -rf ./${{ steps.extract_docver.outputs.docver }}/* "
             docker  exec build /bin/bash -c "mv -f build/doc/build/html/* ./${{ steps.extract_docver.outputs.docver }}/"
             docker  exec build /bin/bash -c "mv -f build/doc/api/html ./${{ steps.extract_docver.outputs.docver }}/api/doxygen"
             docker  exec build /bin/bash -c "find ./ -type d -name \"CMakeFiles\" -prune -exec rm -rf {} \\;"
             docker  exec build /bin/bash -c "find ./ -name \"Makefile\" -exec rm -rf {} \\; "
             docker  exec build /bin/bash -c "find ./ -name \"*.cmake\" -exec rm -rf {} \\;"
             docker  exec build /bin/bash -c "rm -rf ./${{ steps.extract_docver.outputs.docver }}/_sources"
             docker  exec build /bin/bash -c "rm -rf build"
             docker  exec build /bin/bash -c "rm -rf doc"
             docker  exec build /bin/bash -c "rm -rf cmake"

      - name: Deploy documentation
        if: (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/docs_'))  && matrix.buildtype == 'Release' && matrix.os == 'debian11'
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: .
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: "Build: ({sha}) {msg}"

      - name: Stop the docker
        run: docker container stop build
